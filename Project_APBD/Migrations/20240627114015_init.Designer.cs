// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Project_APBD.Contexts;

#nullable disable

namespace Project_APBD.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20240627114015_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Project_APBD.Models.Contract", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("CustomerId");

                    b.Property<int?>("DiscountId")
                        .HasColumnType("int")
                        .HasColumnName("discount_id");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("EndDate");

                    b.Property<bool>("IsSigned")
                        .HasColumnType("bit")
                        .HasColumnName("is_signed");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("Price");

                    b.Property<int>("SoftwareId")
                        .HasColumnType("int")
                        .HasColumnName("SoftwareId");

                    b.Property<string>("SoftwareVersion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("software_version");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("StartDate");

                    b.Property<int>("SupportYears")
                        .HasColumnType("int")
                        .HasColumnName("SupportYears");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("DiscountId");

                    b.HasIndex("SoftwareId");

                    b.ToTable("Contract");
                });

            modelBuilder.Entity("Project_APBD.Models.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Address");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Email");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("IsDeleted");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(9)
                        .HasColumnType("nvarchar(9)")
                        .HasColumnName("PhoneNumber");

                    b.HasKey("Id");

                    b.ToTable("Customer");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("Project_APBD.Models.Discount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DiscountType")
                        .HasColumnType("int")
                        .HasColumnName("DiscountType");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("EndDate");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Name");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("StartDate");

                    b.Property<double>("Value")
                        .HasColumnType("float")
                        .HasColumnName("Value");

                    b.HasKey("Id");

                    b.ToTable("Discount");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DiscountType = 1,
                            EndDate = new DateTime(2024, 3, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Black Friday Discount",
                            StartDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Value = 10.0
                        });
                });

            modelBuilder.Entity("Project_APBD.Models.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("Amount");

                    b.Property<int>("ContractId")
                        .HasColumnType("int")
                        .HasColumnName("ContractId");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2")
                        .HasColumnName("Date");

                    b.Property<int>("PaymentType")
                        .HasColumnType("int")
                        .HasColumnName("PaymentType");

                    b.HasKey("Id");

                    b.HasIndex("ContractId");

                    b.ToTable("Payment");
                });

            modelBuilder.Entity("Project_APBD.Models.Software", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Category");

                    b.Property<string>("CurrentVersion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CurrentVersion");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Description");

                    b.Property<bool>("IsOneTimePurchaseAvailable")
                        .HasColumnType("bit")
                        .HasColumnName("IsOneTimePurchaseAvailable");

                    b.Property<bool>("IsSubscriptionAvailable")
                        .HasColumnType("bit")
                        .HasColumnName("IsSubscriptionAvailable");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Name");

                    b.HasKey("Id");

                    b.ToTable("Software");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Category = "Finance",
                            CurrentVersion = "1.0",
                            Description = "Financial software",
                            IsOneTimePurchaseAvailable = true,
                            IsSubscriptionAvailable = false,
                            Name = "FinanceApp"
                        },
                        new
                        {
                            Id = 2,
                            Category = "Education",
                            CurrentVersion = "2.1",
                            Description = "Educational software",
                            IsOneTimePurchaseAvailable = true,
                            IsSubscriptionAvailable = false,
                            Name = "EduApp"
                        });
                });

            modelBuilder.Entity("Project_APBD.Models.CompanyCustomer", b =>
                {
                    b.HasBaseType("Project_APBD.Models.Customer");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CompanyName");

                    b.Property<string>("KrsNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("Krs");

                    b.ToTable("CompanyCustomer");

                    b.HasData(
                        new
                        {
                            Id = 3,
                            Address = "789 Oak St",
                            Email = "info@company.com",
                            IsDeleted = false,
                            PhoneNumber = "555123456",
                            CompanyName = "Company Inc.",
                            KrsNumber = "1234567890"
                        },
                        new
                        {
                            Id = 4,
                            Address = "321 Pine St",
                            Email = "contact@business.com",
                            IsDeleted = false,
                            PhoneNumber = "555987654",
                            CompanyName = "Business LLC",
                            KrsNumber = "0987654321"
                        });
                });

            modelBuilder.Entity("Project_APBD.Models.IndividualCustomer", b =>
                {
                    b.HasBaseType("Project_APBD.Models.Customer");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("FirstName");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("LastName");

                    b.Property<string>("Pesel")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)")
                        .HasColumnName("Pesel");

                    b.ToTable("IndividualCustomer");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "123 Main St",
                            Email = "john.doe@example.com",
                            IsDeleted = false,
                            PhoneNumber = "123456789",
                            FirstName = "John",
                            LastName = "Doe",
                            Pesel = "12345678901"
                        },
                        new
                        {
                            Id = 2,
                            Address = "456 Elm St",
                            Email = "jane.smith@example.com",
                            IsDeleted = false,
                            PhoneNumber = "987654321",
                            FirstName = "Jane",
                            LastName = "Smith",
                            Pesel = "98765432109"
                        });
                });

            modelBuilder.Entity("Project_APBD.Models.Contract", b =>
                {
                    b.HasOne("Project_APBD.Models.Customer", "Customer")
                        .WithMany("Contracts")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Project_APBD.Models.Discount", "Discount")
                        .WithMany("Contracts")
                        .HasForeignKey("DiscountId");

                    b.HasOne("Project_APBD.Models.Software", "Software")
                        .WithMany("Contracts")
                        .HasForeignKey("SoftwareId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Discount");

                    b.Navigation("Software");
                });

            modelBuilder.Entity("Project_APBD.Models.Payment", b =>
                {
                    b.HasOne("Project_APBD.Models.Contract", "Contract")
                        .WithMany("Payments")
                        .HasForeignKey("ContractId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contract");
                });

            modelBuilder.Entity("Project_APBD.Models.CompanyCustomer", b =>
                {
                    b.HasOne("Project_APBD.Models.Customer", null)
                        .WithOne()
                        .HasForeignKey("Project_APBD.Models.CompanyCustomer", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Project_APBD.Models.IndividualCustomer", b =>
                {
                    b.HasOne("Project_APBD.Models.Customer", null)
                        .WithOne()
                        .HasForeignKey("Project_APBD.Models.IndividualCustomer", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Project_APBD.Models.Contract", b =>
                {
                    b.Navigation("Payments");
                });

            modelBuilder.Entity("Project_APBD.Models.Customer", b =>
                {
                    b.Navigation("Contracts");
                });

            modelBuilder.Entity("Project_APBD.Models.Discount", b =>
                {
                    b.Navigation("Contracts");
                });

            modelBuilder.Entity("Project_APBD.Models.Software", b =>
                {
                    b.Navigation("Contracts");
                });
#pragma warning restore 612, 618
        }
    }
}
